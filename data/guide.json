{"categories":[{"category":"Introduction","content":"<p>If you've researched cloud native applications and technologies, you've probably come\nacross the <a href=\"https://landscape.cncf.io\">CNCF cloud native landscape</a>. Unsurprisingly,\nthe sheer scale of it can be overwhelming. So many categories and so many technologies.\nHow do you make sense of it?</p>\n<p>As with anything else, if you break it down and analyze it one piece at a time, you'll\nfind it's not that complex and makes a lot of sense. In fact, the map is neatly organized\nby functionality and, once you understand what each category represents, navigating it\nbecomes a lot easier.</p>\n<p>In this guide, we'll break this mammoth landscape down and provide a high-level overview\nof its layers, columns, and categories.</p>\n","keywords":[],"subcategories":[{"subcategory":"What is the cloud native landscape?","content":"<p>The goal of the cloud native landscape is to compile and organize all cloud native open\nsource projects and proprietary products into categories, providing an overview of the\ncurrent ecosystem. Organizations that have a cloud native project or product can\n<a href=\"https://github.com/cncf/landscape/\">submit a PR</a> to request it to be added to the\nlandscape.</p>\n"},{"subcategory":"How to use this guide","content":"<p>In this guide, you'll find one chapter per layer and column which discusses each category\nwithin it. Categories are broken down into: what it is, the problem it addresses, how it\nhelps, and technical 101. While the first three sections assume no technical background,\nthe technical 101 is targeted to engineers just getting started with cloud native. We\nalso included a section for associated buzzwords and lists CNCF projects.</p>\n<blockquote>\n<h5>INFOBOX</h5>\n<p>When looking at the landscape, you'll note a few distinctions:</p>\n<ul>\n<li><em>Projects in large boxes</em> are CNCF-hosted open source projects. Some are still in\nthe incubation phase (light blue/purple frame), while others are graduated\nprojects (dark blue frame).</li>\n<li><em>Projects in small white boxes</em> are open source projects.</li>\n<li><em>Products in gray boxes</em> are proprietary products.</li>\n</ul>\n<p>Please note that new projects are continuously becoming part of the CNCF so\nalways refer to the actual landscape - things are moving fast!</p>\n</blockquote>\n"},{"subcategory":"Contribute to the CNCF Landscape","content":"<p>Are you searching for an exciting project to contribute to within the CNCF ecosystem?\nLook no further! The CNCF hosts a wide range of projects that span cloud-native computing.\nTo find the perfect project for your skills and interests, check out our comprehensive\ncontribution guide at <a href=\"https://contribute.cncf.io/contributors/getting-started/\">Getting Started</a>.\nIt provides you step-by-step instructions on getting started and offers valuable insights for\nboth newcomers and experienced contributors. Join our vibrant community and make your mark on\ncloud-native innovation today!</p>\n"}]},{"category":"Provisioning","content":"<p>Provisioning is the first layer in the cloud native landscape. It encompasses tools that\nare used to <em>create and harden</em> the foundation on which cloud native apps are built.\nYou'll find tools to automatically configure, create, and manage the infrastructure,\nas well as  for scanning, signing, and storing container images. The layer also extends\nto security with tools that enable policy setting and enforcement, embedded authentication\nand authorization, and the handling of secrets distribution. That's a mouthful, so let's\ndiscuss each category at a time.</p>\n","keywords":[],"subcategories":[{"subcategory":"Automation & Configuration","content":"<h4>What it is</h4>\n<p>Automation and configuration tools speed up the creation and configuration of compute\nresources (virtual machines, networks, firewall rules, load balancers, etc.). Tools in\nthis category either handle different parts of the provisioning process or try to control\neverything end-to-end. Most provide the ability to integrate with other projects and\nproducts in the space.</p>\n<h4>Problem it addresses</h4>\n<p>Traditionally, IT processes relied on lengthy and labor intensive manual release cycles,\ntypically between three to six months. Those cycles came with lots of human processes and\ncontrols that slowed down changes to production environments. These slow release cycles\nand static environments aren't compatible with cloud native development. To deliver on\nrapid development cycles, infrastructure must be provisioned dynamically and without\nhuman intervention.</p>\n<h4>How it helps</h4>\n<p>Tools of this category allow engineers to build computing environments without human\nintervention. By codifying the environment setup it becomes reproducible with the click\nof a button. While manual setup is error prone, once codified, environment creation\nmatches the exact desired state -- a huge advantage.</p>\n<p>While tools may take different approaches, they all aim at reducing the required work\nto provision resources through automation.</p>\n<h4>Technical 101</h4>\n<p>As we move from old-style human-driven provisioning to a new on-demand scaling model\ndriven by the cloud, the patterns and tools we used before no longer meet our needs.\nMost organizations can't afford a large 24x7 staff to create, configure, and manage\nservers. Automated tools like Terraform reduce the level of effort required to scale\ntens of servers and networks with hundreds of firewall rules. Tools like Puppet, Chef,\nand Ansible provision and/or configure these new servers and applications\nprogrammatically as they are spun up and allow them to be consumed by developers.</p>\n<p>Some tools interact directly with the infrastructure APIs provided by platforms like\nAWS or vSphere, while others focus on configuring the individual machines to make them\npart of a Kubernetes cluster. Many, like Chef and Terraform, can interoperate to provision\nand configure the environment. Others, like OpenStack, exist to provide an\nInfrastructure-as-a-Service (IaaS) environment that other tools could consume.\nFundamentally, you'll need one or more tools in this space as part of laying down the\ncomputing environment, CPU, memory, storage, and networking, for your Kubernetes clusters.\nYou'll also need a subset of these to create and manage the Kubernetes clusters\nthemselves.</p>\n<p>There are now over 5 CNCF projects in this space, more if you count projects like Cluster\nAPI which don't appear on the landscape. There is also a very robust set of other open\nsource and vendor provided tools.</p>\n","keywords":["Infrastructure-as-Code (IaC)","Automation","Declarative Configuration"]}]}]}